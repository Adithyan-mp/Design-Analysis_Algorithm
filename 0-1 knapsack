#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

class KnapSack {
private:
    vector<int> weight;
    vector<int> value;
    int capacity;
    int count; //how many items

public:

    void getData() {
        cout << "ENTER HOW MANY ITEMS ARE THERE: ";
        cin >> count;
        weight.resize(count + 1);
        value.resize(count + 1);

        // Initialize the first element to 0 for both weight and value
        weight[0] = 0;
        value[0] = 0;

        cout << "Enter weight and value of the items respectively:\n";
        for (int i = 1; i <= count; i++) {
            cout << "Weight (" << i << "): ";
            cin >> weight[i];
            cout << "Value (" << i << "): ";
            cin >> value[i];
        }

        cout << "Enter maximum capacity: ";
        cin >> capacity;
        cin.ignore(); // Clear the input buffer
    }

    int getWeight(int i) {
        return weight[i];
    }

    int getValue(int i) {
        return value[i];
    }

    int getCapacity() {
        return capacity;
    }

    int getCount() {
        return count;
    }

    int getMaxItem();
    
    void traceBack(vector<vector<int>> sack);
};

int KnapSack::getMaxItem() {
    // Dynamic programming approach to solve the 0/1 Knapsack problem
    vector<vector<int>> minisack(count + 1, vector<int>(capacity + 1, 0));

    for (int i = 1; i <= count; i++) {
        for (int j = 0; j <= capacity; j++) {
            if (j - weight[i] < 0) {
                minisack[i][j] = minisack[i - 1][j];
            }
            else {
                minisack[i][j] = max(minisack[i - 1][j], value[i] + minisack[i - 1][j - weight[i]]);
            }
        }
    }

    // Print the minisack matrix for debugging
    cout << "Minisack matrix:\n";
    for (int i = 0; i <= count; i++) {
        for (int j = 0; j <= capacity; j++) {
            cout << minisack[i][j] << " ";
        }
        cout << endl;
    }
    
    
    cout<<"\n\n";
    
    traceBack(minisack);

    return minisack[count][capacity];
}

void KnapSack::traceBack(vector<vector<int>> sack){
    int i = count;
    int j = capacity;
    while (i > 0 && j > 0) {
        if (j - weight[i] >= 0 && sack[i][j] == value[i] + sack[i - 1][j - weight[i]]) {
            // Item i is included in the optimal solution
            cout << "Item " << i << ": Weight = " << weight[i] << ", Value = " << value[i] << endl;
            j = j - weight[i];
        }
        i--;
    }
}


int main() {
    KnapSack sack;
    sack.getData();
    
    // Output some messages for debugging
    cout << "Data entered successfully.\n";
    int maxItemValue = sack.getMaxItem();
    cout << "Maximum value for the knapsack: " << maxItemValue << "\n";

    return 0;
}
